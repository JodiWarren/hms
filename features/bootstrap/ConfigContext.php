<?php

require_once ('HmsContext.php');

use Behat\Behat\Context\Step\Given;
use Behat\Behat\Context\Step\Then;
use Behat\Behat\Context\Step\When;
use Behat\Behat\Event\ScenarioEvent;

class ConfigContext extends HmsContext {

/**
 * Get the path to the config dir.
 * @return string Path to the config dir.
 */
	private function __getConfigDir() {
		return dirname(__FILE__) . '/../../app/Config';
	}

/**
 * Get the path to the backup config dir.
 * @return string Path to the backup config dir.
 */
	private function __getBackupConfigDir() {
		return $this->_testDir() . 'HMS_Config/';
	}

	private function __readConfigFile($file) {
		$this->_logger()->logInfo("Reading config file at: $file");
		include $file;
		return $config;
	}

	private function __writeConfigFile($file, $values) {
		$this->_logger()->logInfo("Writing config file at: $file");
		$contents = '<?php' . "\n // This config file has been automatiocally generated by the acceptance tests.\n" . '$config = ' . var_export($values, true) . ';';
		return file_put_contents($file, $contents);
	}

	private function __writeConfigValue($file, $var, $value) {
		// Load the existing values
		$configPath = $this->__getConfigDir() . "/$file.php";

		$this->_logger()->logInfo("Writing to config file at: $file, [$var]", $value);

		$values = $this->__readConfigFile($configPath);

		// Set the value we're interesed in
		$values[$var] = $value;

		// Write back to file
		$this->__writeConfigFile($configPath, $values);
	}

	public function beforeScenario() {
		$this->__copyExistingConfigFiles();
	}

	private function __copyExistingConfigFiles() {
		$currentConfigDir = $this->__getConfigDir();
		$backupConfigDir = $this->__getBackupConfigDir();
		$this->_fileContext()->moveFolderTo($currentConfigDir, $backupConfigDir);
	}

	public function readDatabaseConfig() {
		$file = $this->__getConfigDir() . '/database.php';
		$this->_logger()->logInfo("Reading database config file at: $file");

		if (!class_exists("DATABASE_CONFIG")) {
			include $file;
		}

		$dbConfig = new DATABASE_CONFIG();

		return $dbConfig->default;
	}

/**
 * @AfterScenario
 */
	public function restoreOldConfigFiles($event) {
		$currentConfigDir = $this->__getConfigDir();
		$backupConfigDir = $this->__getBackupConfigDir();
		$this->_fileContext()->moveFolderTo($backupConfigDir, $currentConfigDir);
	}

/**
 * @Given /^I am in the hackspace$/
 */
	public function iAmInTheHackspace() {
		$this->__writeConfigValue('debug', 'forceRequestIp', '10.0.0.10');
	}

/**
 * @Given /^I set the email debug directory to "(?P<directory>.*)"$/
 */
	public function iSetTheEmailDebugDirectoryTo($directory) {
		$this->__writeConfigValue('debug', 'emailDebugDirectory', $directory);
	}
}